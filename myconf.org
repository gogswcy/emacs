* 加载packages
** 配置国内镜像. 打开emacs自动安装未安装的包
   #+BEGIN_SRC emacs-lisp
   (require 'cl)
   (require 'package)
   (package-initialize)
   (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

   ;; Add Packages
   (defvar my/packages '(
		      company
		      hungry-delete
		      swiper
		      counsel
		      smartparens
		      popwin
		      expand-region
		      iedit
		      org-pomodoro
		      rg
		      window-numbering
		      evil-surround
		      evil-nerd-commenter
		      which-key
		      js2-mode
		      web-mode
		      evil
		      evil-leader
		      nodejs-repl
		      slime
		      monokai-theme
		      solarized-theme
		      use-package
		      ) "Default packages")

    (setq package-selected-packages my/packages)
    
    (defun my/packages-installed-p ()
      (loop for pkg in my/packages
        when (not (package-installed-p pkg)) do (return nil)
	finally (return t)))
	
    (unless (my/packages-installed-p)
      (message "%s" "Refreshing package database...")	
      (package-refresh-contents)
      (dolist (pkg my/packages)
        (when (not (package-installed-p pkg))
	(package-install pkg))))
   #+END_SRC
** 加载包
   - use-package
     #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     #+END_SRC
   - swiper
     #+BEGIN_SRC emacs-lisp
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     #+END_SRC
   - hungry-delete-mode
     #+BEGIN_SRC emacs-lisp
     (global-hungry-delete-mode)
     #+END_SRC
   - 开启 Company 补全
     #+BEGIN_SRC emacs-lisp
     (global-company-mode 1)
     #+END_SRC
   - smartparens-config
     #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t)
     #+END_SRC
   - 打开方式
     #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist
         (append
	 '(("\\.js\\'" . js2-mode))
	 '(("\\.html\\'" . web-mode))
	 auto-mode-alist))
     #+END_SRC
   - slime设置
     #+BEGIN_SRC emacs-lisp
     (setq inferior-lisp-program "/usr/bin/sbcl")
     (add-to-list 'slime-contribs 'slime-fancy)
     #+END_SRC
   - popwin
     #+BEGIN_SRC emacs-lisp
     (require 'popwin)
     (popwin-mode t)
     #+END_SRC
   - evil-mode
     #+BEGIN_SRC emacs-lisp
     (evil-mode 1)
     (setcdr evil-insert-state-map nil)
     (define-key evil-insert-state-map [escape] 'evil-normal-state)
     #+END_SRC
   - evil-leader
     #+BEGIN_SRC emacs-lisp
     (global-evil-leader-mode)
     #+END_SRC
   - window-number
     #+BEGIN_SRC emacs-lisp
     (window-numbering-mode 1)
     #+END_SRC
   - evil-surround
     #+BEGIN_SRC emacs-lisp
     (require 'evil-surround)
     (global-evil-surround-mode)
     #+END_SRC
   - evil-nerd-commenter
     #+BEGIN_SRC emacs-lisp
     (evilnc-default-hotkeys)
     (define-key evil-normal-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
     (define-key evil-visual-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
     #+END_SRC
   - which-key
     #+BEGIN_SRC emacs-lisp
     (which-key-mode 1)
     #+END_SRC
** 使用use-package加载

* ui设置
  - 默认开启后全屏
    #+BEGIN_SRC emacs-lisp
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    #+END_SRC
  - 当前行高亮
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
    #+END_SRC
  - 主题
    #+BEGIN_SRC emacs-lisp
    ;; (load-theme 'solarized 1)
    #+END_SRC
  - 关闭工具栏
    #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    #+END_SRC
  - 关闭滑动控件
    #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    #+END_SRC
  - 显示行号
    #+BEGIN_SRC emacs-lisp
    (global-display-line-numbers-mode 1)
    #+END_SRC
  - 更改光标样式
    #+BEGIN_SRC emacs-lisp
    (setq-default cursor-type 'bar)
    #+END_SRC
  - 关闭启动帮助画面
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen 1)
    #+END_SRC

* 自定义函数
** 快速打开配置文件
   - 打开init.el
     #+BEGIN_SRC emacs-lisp
     (defun open-init-file()
       (interactive)
       (find-file "~/.emacs.d/init.el"))
     #+END_SRC
   - 打开myconf.org
     #+BEGIN_SRC emacs-lisp
     (defun open-initorg-file()
       (interactive)
       (find-file "~/.emacs.d/myconf.org"))
     #+END_SRC
** 增强功能的函数
   - 当光标在括号里面的时候, 也能显示出匹配的括号
     #+BEGIN_SRC emacs-lisp
     (define-advice show-paren-function (:around (fn) fix-show-paren-function)
       (cond ((looking-at-p "\\s(") (funcall fn))
           (t (save-excursion
	       (ignore-errors (backward-up-list))
	       (funcall fn)))))
     #+END_SRC
   - 缩进函数, 自动排版选中的区域, 如果没有选中的区域, 就自动给整个buffer排版
     #+BEGIN_SRC emacs-lisp
     (defun indent-buffer ()
       (interactive)
       (indent-region (point-min) (point-max)))
     (defun indent-region-or-buffer ()
     "Indent a region if selected, otherwise the whole buffer."
       (interactive)
       (save-excursion
         (if (region-active-p)
	   (progn
	     (indent-region (region-beginning) (region-end))
	     (message "Indented selected region."))
	   (progn
	     (indent-buffer)
	     (message "Indented buffer.")))))
     #+END_SRC
   - Occur Mode 默认搜索当前被选中的或者光标下的字符
     #+BEGIN_SRC emacs-lisp
     (defun occur-dwim ()
     (interactive)
     (push (if (region-active-p)
	    (buffer-substring-no-properties
	     (region-beginning)
	     (region-end))
	  (let ((sym (thing-at-point 'symbol)))
	    (when (stringp sym)
	      (regexp-quote sym))))
	regexp-history)
     (call-interactively 'occur))
     #+END_SRC
   - Slime 模式,去除自动匹配括号的功能
     #+BEGIN_SRC emacs-lisp
     (defun disable-smartparens ()
     (turn-off-smartparens-mode))
     (add-hook 'slime-repl-mode-hook #'disable-smartparens)
     #+END_SRC

* 功能设置
** emacs功能的一些配置
   - 关闭滚动到底部的提示音
     #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
     #+END_SRC
   - 默认编码
     #+BEGIN_SRC emacs-lisp
     (set-language-environment "UTF-8")
     #+END_SRC
   - 外部修改过的文件, 自动加载, 不用关了再重新开
     #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
     #+END_SRC
   - 关闭自动备份
     #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     #+END_SRC
   - 关闭自动保存
     #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil)
     #+END_SRC
   - yes-or-no换成y-or-n
     #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     #+END_SRC
** 增强功能
   - 缩写
     #+BEGIN_SRC emacs-lisp
     (abbrev-mode t)
     (define-abbrev-table 'global-abbrev-table '(
                                                ;; sinagture
						("wys" "Wang YaSong")))
     #+END_SRC
   - 最近打开文档, 保存10条记录
     #+BEGIN_SRC emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-item 10)
     #+END_SRC
   - 启用括号匹配, 并自定义函数, 当光标在括号里面的时候, 也能显示出匹配的括号
     #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
     #+END_SRC
   - 选中字符后, 输入内容会替换掉, 而不是直接插入内容
     #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
     #+END_SRC
   - hippie-expand补全, 在company不能用, 或者不好用的时候使用
     #+BEGIN_SRC emacs-lisp
     (setq hippie-expand-try-functions-list '(try-expand-dabbrev
					 try-expand-dabbrev-all-buffers
					 try-expand-dabbrev-from-kill
					 try-complete-file-name-partially
					 try-complete-file-name
					 try-expand-all-abbrevs
					 try-expand-list
					 try-expand-line
					 try-complete-lisp-symbol-partially
					 try-complete-lisp-symbol))
     #+END_SRC
   - Emacs Lisp 不补全' `
     #+BEGIN_SRC emacs-lisp
     (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)
     (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "`" nil :actions nil)
     (sp-local-pair '(org-mode lisp-interaction-mode) "'" nil :actions nil)
     #+END_SRC
     
* org设置
  - with-eval-after-load
    #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org
    ;; org 文本内语法高亮
    (setq org-src-fontify-natively t)
    
    ;; 设置默认 Org Agenda 文件目录
    (setq org-agenda-files '("~/org"))
    
    ;; 设置一个模版,其中设置了待办事项的优先级还有触发键
    (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "TODO")
        "* TODO [#B] %?\n  %i\n"
	:empty-lines 1)))
    )
    #+END_SRC

* 快捷键的设置
  - 向前删除一个单词
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-w") 'backward-kill-word)
    #+END_SRC
  - Org Agenda
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c a") 'org-agenda)
    #+END_SRC
  - Org Capture
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c c") 'org-capture)
    #+END_SRC
  - expand-region
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-=") 'er/expand-region)
    #+END_SRC
  - hippie-expand
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-/") 'hippie-expand)
    #+END_SRC
  - 设置Company补全的选择快捷键为c-n c-p
    #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
    #+END_SRC
  - evil-leader快捷键
    #+BEGIN_SRC emacs-lisp
    (evil-leader/set-key
      "ff" 'find-file
      "ca" 'org-agenda
      "cc" 'org-capture
      "fj" 'dired-jump
      "fed" 'open-initorg-file
      "ss" 'swiper
      "fr" 'recentf-open-files
      "bb" 'switch-to-buffer
      "bd" 'kill-buffer
      "fs" 'save-buffer
      "pf" 'counsel-git
      "fg" 'rg
      "i\\" 'indent-region-or-buffer
      "se" 'iedit-mode
      "so" 'occur-dwim
      "0" 'select-window-0
      "1" 'select-window-1
      "2" 'select-window-2
      "3" 'select-window-3
      "w/" 'split-window-right
      "w-" 'split-window-below
      "wd" 'delete-window
      "SPC" 'counsel-M-x
      "wm" 'delete-other-windows
      "wd" 'delete-window
      "qq" 'save-buffers-kill-terminal
    )
    #+END_SRC
